<style lang="less">
.container {
  -webkit-font-smoothing: antialiased;
  padding: 0 25rpx;
  height: auto;
}
.title {
  font-size: 20pt;
  font-weight: 400;
}
.source {
  color: #666;
  font-size: 12pt;
  text-align: left;
  width: 100%;
  margin: 15rpx 0 20rpx;
}
.article-image {
  width: 100%;
  height: 200px;
  background-color: #e8e8e8;
}
.paragrah {
  &:after {
    content: '';
    flex: auto;
  }
  &.description {
    margin-bottom: 40rpx;
    color: #999;
  }
  -webkit-font-smoothing: antialiased;
  width: 100%;
  font-size: 14pt;
  color: #424242;
  margin: 20rpx 0;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  .word {
    display: inline-flex;
    padding: 0 5px;
    border-radius: 4px;
    -webkit-transition: all 0.1s;
    padding: 10rpx 4rpx 20rpx;
    line-height: 24rpx;
    margin-right: 2pt;
    &.highlight {
      background-color: rgb(32, 158, 133);
      color: #fff;
    }
  }
}
.btn {
  width: 100%;
  button {
    width: 60%;
    border-radius: 5px;
    margin: 20px auto;
    padding-top: 2px;
    font-size: 14px;
    background-color: rgb(121, 200, 158);
    color: white;
    overflow: hidden;
    height: 40px;
  }
}
</style>

<template>
  <view class="container" id="{{detail.articleId}}" @tap="handleTap">
    <information />
    <view class="title">{{detail.title_en}}</view>
    <text class="source">via: {{detail.source.name_en}}</text>
    <view wx:for="{{paragrahs}}" wx:key="paragrah._id" wx:for-item="paragrah" class="paragrah" id="{{paragrah._id}}">
      <block wx:if="{{paragrah.sent}}">
        <block wx:for="{{paragrah.sent}}" wx:key="index" wx:for-item="sentence">
          <text wx:for="{{sentence.words}}" wx:key="index" wx:for-item="word" data-index="{{index}}" data-word="{{word}}" data-sentenceid="{{sentence.id}}" id="{{sentence.id}}" class='word' :class="{highlight:selectedWordPosition[0]===sentence.id && selectedWordPosition[1]===index}">{{word}}</text>
        </block>
      </block>
      <block wx:else>
        <image src="{{paragrah.img.url}}" class="article-image" mode='widthFix' id="{{paragrah._id}}" />
        <view class="paragrah description">
          <text wx:for="{{paragrah.img.desc}}" wx:key="index" wx:for-item="word" data-index="{{index}}" data-word="{{word}}" data-sentenceid="{{paragrah._id}}" id="{{paragrah._id}}" class='word' :class="{highlight:selectedWordPosition[0]===paragrah._id && selectedWordPosition[1]===index}">{{word}}</text>
        </view>
      </block>
    </view>
    <view class="btn" wx:if="{{!isFromShare}}">
      <!-- 加wx:if是为了让加载完后才显示button，不然文章还没加载完整个页面就一个孤零零的button太丑了 -->
      <button wx:if="{{ !!detail.title_en && (isRead === -1) }}" @tap="finish">完成阅读</button>
      <button wx:if="{{ !!detail.title_en && (isRead !== -1) }}" @tap="viewComments">查看读后感</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import X2JS from '../../utils/x2js.js';
import Infomation from '../../components/information';
export default class Article extends wepy.page {
  config = {
    navigationBarTitleText: '短文阅读'
  };
  components = {
    information: Infomation
  };
  data = {
    selectedWordPosition: [0, 0],
    detail: {
      content:
        '<article_content ><para><href></href><img><url></url><desc></desc></img></para><para ><sent><![CDATA[ ]]></sent></para></article_content>',
      articleId: null,
      title_en: '',
      source: {}
    },
    annotation: [
      {
        sentence_id: '',
        annotation: {}
      }
    ],
    isFinished: false, // 是否完成阅读
    isRead: -1, // 是否在我的短文中
    isFromShare: false, // 是否是从小程序分享卡片进来的
  };
  methods = {
    handleTap(e) {
      if (e.target.dataset.word === void 0) {
        // 点击文字以外的区域
        this.$invoke('information', 'hide');
        this.selectedWordPosition = [0, 0];
      } else {
        // 点击文字 则呼出翻译区域
        let { index, word, sentenceid } = e.target.dataset;
        this.selectedWordPosition = [sentenceid, index];
        let w = word.replace(/\W$|^\W/, ''); // 去除标点（句号逗号）的单词
        this.$invoke('information', 'show', {
          word: w
        });
      }
    },
    // 完成阅读
    finish() {
      if (this.isFinished) {
        this.isRead = 1;
        // 保存阅读过的文章ID
        var myArticles = wx.getStorageSync('my_articles');
        myArticles.push(this.detail.id);
        wx.setStorageSync('my_articles', myArticles);
        // 保存今日学习文章的数据
        var articleDetail = wx.getStorageSync('today_articles_detail');
        articleDetail.words_num = articleDetail.words_num + this.detail.length;
        articleDetail.articles_num = articleDetail.articles_num + 1;
        wx.setStorageSync('today_articles_detail', articleDetail);
        // 保存学习文章的累积数据
        var sumArticleDetail = wx.getStorageSync('sum_articles_detail');
        sumArticleDetail.words_num =
          sumArticleDetail.words_num + this.detail.length;
        sumArticleDetail.articles_num = sumArticleDetail.articles_num + 1;
        wx.setStorageSync('sum_articles_detail', articleDetail);
        // 更新历史学习文章的数据
        var allArticlesDetail = wx.getStorageSync('all_articles_detail');
        // 如果不是同一天，新增数据，否则更新数据
        if (
          articleDetail.day !==
          allArticlesDetail[allArticlesDetail.length - 1].day
        ) {
          allArticlesDetail.push(wx.getStorageSync('today_articles_detail'));
          wx.setStorageSync('all_articles_detail', allArticlesDetail);
        } else {
          allArticlesDetail.words_num = articleDetail.words_num;
          allArticlesDetail.articles_num = articleDetail.articles_num;
          wx.setStorageSync('all_articles_detail', allArticlesDetail);
        }
        // 跳转到读后感界面
        wx.navigateTo({
          url: `../study_article/comments?id=${this.detail.id}&articleTitle=${
            this.detail.title_en
          }`
        });
      } else {
        wx.showModal({
          title: '未完成',
          content: '阅读速度超过人类！请认真再读一遍。'
        });
      }
    },
    // 查看读后感
    viewComments() {
      wx.navigateTo({
        url: `../study_article/comments?id=${this.detail.id}&articleTitle=${
          this.detail.title_en
        }`
      });
    }
  };
  computed = {
    articleContent() {
      return this.parseContent(this.detail.content).article_content;
    },
    articleId() {
      return this.articleContent._id;
    },
    paragrahs() {
      return this.articleContent.para.map(paragrah => {
        if (paragrah.sent) {
          if (!Array.isArray(paragrah.sent)) {
            paragrah.sent = [].concat(paragrah.sent);
          }
          paragrah.sent = paragrah.sent.map(sent => {
            let id = sent._id;
            let words = sent.__cdata.split(' ');
            if (this.annotationObject && this.annotationObject[id]) {
              for (let startIndex in this.annotationObject[id]) {
                let { len, phrase } = this.annotationObject[id][startIndex];
                words.splice(startIndex, len, phrase);
                while (len--) {
                  words.splice(startIndex + 1, 0, '');
                }
              }
            }
            return {
              words,
              id
            };
          });
        } else if (paragrah.img) {
          paragrah.img.desc = paragrah.img.desc.__cdata
            ? paragrah.img.desc.__cdata.split(' ')
            : paragrah.img.desc;
        } else {
          paragrah.img = {};
        }
        return paragrah;
      });
    },
    annotationObject() {
      let annotationObject = {};
      this.annotation.forEach(element => {
        annotationObject[element.sentence_id] = {};
        for (let key in element.annotation) {
          let startIndex = element.annotation[key][0];
          let len = element.annotation[key].length;
          annotationObject[element.sentence_id][startIndex] = {
            len,
            phrase: key
          };
        }
      });
      return annotationObject;
    }
  };
  parseContent(content) {
    var x2js2 = new X2JS({
      keepCData: true
    });
    return x2js2.xml2js(content);
  }
  onShareAppMessage() {
    let id = this.detail.id;
    let title = this.detail.title_cn;
    return {
      title: `轻英语 - ${title}`,
      path: `/pages/study_article/article?id=${id}&isFromShare=${true}`
    };
  }
  onLoad(options = {}) {
    wx.showLoading({
      title: '加载中'
    });
    options.id = options.id || 'oivfz';
    this.isFromShare = options.isFromShare ? true : false; // 如果是分享页面进来的，不显示完成阅读
    wx.request({
      url: `https://www.shanbay.com/api/v2/news/articles/${options.id}/`,
      success: res => {
        if (res.data.msg === 'SUCCESS') {
          Object.assign(this.detail, res.data.data);
          // 设定完成阅读的最少时间
          setTimeout(() => {
            this.isFinished = true;
          }, this.detail.min_used_seconds * 1000);
          wx.request({
            url: `https://www.shanbay.com/api/v2/news/articles/${
              options.id
            }/annotation/`,
            success: res => {
              if (res.data.msg === 'SUCCESS') {
                Object.assign(this.annotation, res.data.data);
              }
            }
          });
        }
        console.log(this.detail);

        this.$apply();
        wx.hideLoading();
      }
    });
    this.isRead = wx.getStorageSync('my_articles').indexOf(options.id);
  }
}
</script>
